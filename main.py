import os
import logging
from datetime import datetime, timedelta
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# Configura√ß√£o do token
if 'TOKEN' in os.environ:
    TOKEN = os.environ['TOKEN']  # Para ambientes como Replit
else:
    load_dotenv()  # Carrega vari√°veis do arquivo .env
    TOKEN = os.getenv('TOKEN')  # Para execu√ß√£o local com .env

# Permite que o usu√°rio defina o token diretamente no main.py
if not TOKEN:
    TOKEN = "SEU_TOKEN_AQUI"  # Substitua por seu token diretamente no c√≥digo

if not TOKEN or TOKEN == "SEU_TOKEN_AQUI":
    raise ValueError("Token n√£o encontrado! Configure a vari√°vel 'TOKEN' no ambiente, .env ou diretamente no main.py.")

# Configura√ß√£o de logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# Tradu√ß√µes para m√∫ltiplos idiomas
LANGUAGES = {
    'en': {
        'greeting': "Hi! Choose an option:",
        'mtproto_button': "MTProto Proxies",
        'socks_button': "SOCKS Proxies",
        'refresh_button': "Refresh",
        'connect': "Connect to",
        'switch_to_mtproto': "Switch to MTProto",
        'switch_to_socks': "Switch to SOCKS",
        'language_changed': "Language changed to English.",
        'mtproto_msg': "Here are your MTProto proxies:",
        'socks_msg': "Here are your SOCKS proxies:",
        'no_proxies': "No proxies are currently available.",
        'country': "Country",
        'host': "Host",
        'port': "Port",
        'secret': "Secret",
        'uptime': "Uptime",
        'ping': "Ping",
        'upload': "Upload",
        'download': "Download",
        'added_on': "Added on",
        'choose_language': "Please choose your language:"
    },
    'pt': {
        'greeting': "Ol√°! Escolha uma op√ß√£o:",
        'mtproto_button': "Proxies MTProto",
        'socks_button': "Proxies SOCKS",
        'refresh_button': "Atualizar",
        'connect': "Conectar a",
        'switch_to_mtproto': "Trocar para MTProto",
        'switch_to_socks': "Trocar para SOCKS",
        'language_changed': "Idioma alterado para portugu√™s.",
        'mtproto_msg': "Aqui est√£o seus proxies MTProto:",
        'socks_msg': "Aqui est√£o seus proxies SOCKS:",
        'no_proxies': "Nenhum proxy est√° dispon√≠vel no momento.",
        'country': "Pa√≠s",
        'host': "Host",
        'port': "Porta",
        'secret': "Segredo",
        'uptime': "Tempo ativo",
        'ping': "Ping",
        'upload': "Upload",
        'download': "Download",
        'added_on': "Adicionado em",
        'choose_language': "Por favor, escolha seu idioma:"
    },
    'es': {
        'greeting': "¬°Hola! Elige una opci√≥n:",
        'mtproto_button': "Proxies MTProto",
        'socks_button': "Proxies SOCKS",
        'refresh_button': "Actualizar",
        'connect': "Conectar a",
        'switch_to_mtproto': "Cambiar a MTProto",
        'switch_to_socks': "Cambiar a SOCKS",
        'language_changed': "Idioma cambiado a espa√±ol.",
        'mtproto_msg': "Aqu√≠ est√°n tus MTProto proxies:",
        'socks_msg': "Aqu√≠ est√°n tus SOCKS proxies:",
        'no_proxies': "No hay proxies disponibles en este momento.",
        'country': "Pa√≠s",
        'host': "Host",
        'port': "Puerto",
        'secret': "Secreto",
        'uptime': "Tiempo activo",
        'ping': "Ping",
        'upload': "Subida",
        'download': "Descarga",
        'added_on': "A√±adido en",
        'choose_language': "Por favor, elige tu idioma:"
    },
    'ru': {
        'greeting': "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        'mtproto_button': "MTProto –ø—Ä–æ–∫—Å–∏",
        'socks_button': "SOCKS –ø—Ä–æ–∫—Å–∏",
        'refresh_button': "–û–±–Ω–æ–≤–∏—Ç—å",
        'connect': "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫",
        'switch_to_mtproto': "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ MTProto",
        'switch_to_socks': "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ SOCKS",
        'language_changed': "–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π.",
        'mtproto_msg': "–í–æ—Ç –≤–∞—à–∏ MTProto –ø—Ä–æ–∫—Å–∏:",
        'socks_msg': "–í–æ—Ç –≤–∞—à–∏ SOCKS –ø—Ä–æ–∫—Å–∏:",
        'no_proxies': "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏.",
        'country': "–°—Ç—Ä–∞–Ω–∞",
        'host': "–•–æ—Å—Ç",
        'port': "–ü–æ—Ä—Ç",
        'secret': "–°–µ–∫—Ä–µ—Ç",
        'uptime': "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
        'ping': "–ü–∏–Ω–≥",
        'upload': "–ó–∞–≥—Ä—É–∑–∫–∞",
        'download': "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ",
        'added_on': "–î–æ–±–∞–≤–ª–µ–Ω–æ",
        'choose_language': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
    },
    'ar': {
        'greeting': "ŸÖÿ±ÿ≠ÿ®Ÿãÿß! ÿßÿÆÿ™ÿ± ÿÆŸäÿßÿ±Ÿãÿß:",
        'mtproto_button': "ÿ®ÿ±ŸàŸÉÿ≥Ÿä MTProto",
        'socks_button': "ÿ®ÿ±ŸàŸÉÿ≥Ÿä SOCKS",
        'refresh_button': "ÿ™ÿ≠ÿØŸäÿ´",
        'connect': "ÿßÿ™ÿµŸÑ ÿ®ŸÄ",
        'switch_to_mtproto': "ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ MTProto",
        'switch_to_socks': "ÿßŸÑÿ™ÿ®ÿØŸäŸÑ ÿ•ŸÑŸâ SOCKS",
        'language_changed': "ÿ™ŸÖ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ© ÿ•ŸÑŸâ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©.",
        'mtproto_msg': "Ÿáÿß ŸáŸä ÿ®ÿ±ŸàŸÉÿ≥Ÿäÿßÿ™ MTProto ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ:",
        'socks_msg': "Ÿáÿß ŸáŸä ÿ®ÿ±ŸàŸÉÿ≥Ÿäÿßÿ™ SOCKS ÿßŸÑÿÆÿßÿµÿ© ÿ®ŸÉ:",
        'no_proxies': "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ÿ±ŸàŸÉÿ≥Ÿäÿßÿ™ ŸÖÿ™ÿßÿ≠ÿ© ÿ≠ÿßŸÑŸäŸãÿß.",
        'country': "ÿßŸÑÿØŸàŸÑÿ©",
        'host': "ÿßŸÑŸÖÿ∂ŸäŸÅ",
        'port': "ÿßŸÑŸÖŸÜŸÅÿ∞",
        'secret': "ÿßŸÑÿ≥ÿ±",
        'uptime': "ŸàŸÇÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ",
        'ping': "ŸàŸÇÿ™ ÿßŸÑÿßÿ≥ÿ™ÿ¨ÿßÿ®ÿ©",
        'upload': "ÿßŸÑÿ±ŸÅÿπ",
        'download': "ÿßŸÑÿ™ŸÜÿ≤ŸäŸÑ",
        'added_on': "ÿ™ŸÖÿ™ ÿßŸÑÿ•ÿ∂ÿßŸÅÿ© ŸÅŸä",
        'choose_language': "Ÿäÿ±ÿ¨Ÿâ ÿßÿÆÿ™Ÿäÿßÿ± ŸÑÿ∫ÿ™ŸÉ:"
    },
    'zh': {
        'greeting': "‰Ω†Â•ΩÔºÅÈÄâÊã©‰∏Ä‰∏™ÈÄâÈ°πÔºö",
        'mtproto_button': "MTProto‰ª£ÁêÜ",
        'socks_button': "SOCKS‰ª£ÁêÜ",
        'refresh_button': "Âà∑Êñ∞",
        'connect': "ËøûÊé•Âà∞",
        'switch_to_mtproto': "ÂàáÊç¢Âà∞MTProto",
        'switch_to_socks': "ÂàáÊç¢Âà∞SOCKS",
        'language_changed': "ËØ≠Ë®ÄÂ∑≤Êõ¥Êîπ‰∏∫‰∏≠Êñá„ÄÇ",
        'mtproto_msg': "ËøôÊòØÊÇ®ÁöÑMTProto‰ª£ÁêÜÔºö",
        'socks_msg': "ËøôÊòØÊÇ®ÁöÑSOCKS‰ª£ÁêÜÔºö",
        'no_proxies': "ÁõÆÂâçÊ≤°ÊúâÂèØÁî®ÁöÑ‰ª£ÁêÜ„ÄÇ",
        'country': "ÂõΩÂÆ∂",
        'host': "‰∏ªÊú∫",
        'port': "Á´ØÂè£",
        'secret': "ÂØÜÈí•",
        'uptime': "Âú®Á∫øÊó∂Èó¥",
        'ping': "Âª∂Ëøü",
        'upload': "‰∏ä‰º†",
        'download': "‰∏ãËΩΩ",
        'added_on': "Ê∑ªÂä†‰∫é",
        'choose_language': "ËØ∑ÈÄâÊã©ÊÇ®ÁöÑËØ≠Ë®ÄÔºö"
    }
}

# Cache para armazenar proxies
proxy_cache = {
    'mtproto': {'data': None, 'expires_at': datetime.min},
    'socks': {'data': None, 'expires_at': datetime.min}
}

def convert_timestamp(timestamp):
    """Converte um timestamp Unix para um formato leg√≠vel."""
    return datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')

def fetch_proxies(proxy_type, language):
    """Busca proxies do tipo especificado e retorna bot√µes e informa√ß√µes formatadas."""
    now = datetime.now()
    if proxy_cache[proxy_type]['data'] and proxy_cache[proxy_type]['expires_at'] > now:
        return proxy_cache[proxy_type]['data']

    url = f"https://mtpro.xyz/api/?type={proxy_type}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
    except requests.RequestException as e:
        logging.error(f"Erro ao buscar proxies {proxy_type}: {e}")
        return [], language['no_proxies']

    if data and isinstance(data, list):
        filtered_proxies = sorted(
            (proxy for proxy in data if proxy.get('ping', float('inf')) <= 300 and proxy.get('uptime', 0) >= 95),
            key=lambda x: (x['ping'], -x['uptime'])
        )[:10]

        if not filtered_proxies:
            return [], language['no_proxies']

        buttons = []
        proxy_info_texts = []
        for proxy in filtered_proxies:
            label_connect = f"{language['connect']} {proxy['host']}" if proxy_type == 'mtproto' else f"{language['connect']} {proxy['ip']}"
            url_connect = (
                f"https://t.me/proxy?server={proxy['host']}&port={proxy['port']}&secret={proxy['secret']}"
                if proxy_type == 'mtproto' else
                f"tg://socks?server={proxy['ip']}&port={proxy['port']}"
            )
            buttons.append([InlineKeyboardButton(label_connect, url=url_connect)])
            proxy_info_texts.append(format_proxy_info(proxy, proxy_type, language))

        # Adiciona bot√µes de atualizar e trocar protocolo
        buttons.append([InlineKeyboardButton(language['refresh_button'], callback_data=proxy_type)])
        buttons.append([InlineKeyboardButton(
            language['switch_to_mtproto'] if proxy_type == 'socks' else language['switch_to_socks'],
            callback_data='mtproto' if proxy_type == 'socks' else 'socks'
        )])

        proxy_cache[proxy_type] = {
            'data': (buttons, "\n\n".join(proxy_info_texts)),
            'expires_at': now + timedelta(minutes=5)
        }
        return buttons, "\n\n".join(proxy_info_texts)

    return [], language['no_proxies']

def format_proxy_info(proxy, proxy_type, language):
    """Formata informa√ß√µes do proxy para exibi√ß√£o ao usu√°rio."""
    return (
        f"üåç {language['country']}: {proxy.get('country', 'N/A')}\n"
        f"üîó {language['host']}: {proxy['host'] if proxy_type == 'mtproto' else proxy['ip']}\n"
        f"üö™ {language['port']}: {proxy['port']}\n"
        f"üîë {language['secret']}: {proxy.get('secret', 'N/A')}\n"
        f"üìà {language['uptime']}: {proxy.get('uptime', 'N/A')}%\n"
        f"üì∂ {language['ping']}: {proxy.get('ping', 'N/A')} ms\n"
        f"üìÖ {language['added_on']}: {convert_timestamp(proxy['addTime'])}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Exibe as op√ß√µes de idioma ao usu√°rio quando o comando /start √© enviado."""
    keyboard = [
        [InlineKeyboardButton("üè¥ English", callback_data='lang_en'),
         InlineKeyboardButton("üáßüá∑ Portugu√™s", callback_data='lang_pt')],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='lang_ru'),
         InlineKeyboardButton("üáµüá∏ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", callback_data='lang_ar')],
        [InlineKeyboardButton("üá¶üá∑ Espa√±ol", callback_data='lang_es'),
         InlineKeyboardButton("üá®üá≥ ‰∏≠Êñá", callback_data='lang_zh')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Please choose your language:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manipula cliques nos bot√µes Inline."""
    query = update.callback_query

    if not query:
        return

    user_language_code = context.user_data.get('language', 'en')
    translation = LANGUAGES[user_language_code]

    if query.data.startswith('lang_'):
        selected_language = query.data.split('_')[1]
        context.user_data['language'] = selected_language
        translation = LANGUAGES[selected_language]
        await query.answer()
        await query.message.reply_text(translation['language_changed'])

        keyboard = [
            [InlineKeyboardButton(translation['mtproto_button'], callback_data='mtproto')],
            [InlineKeyboardButton(translation['socks_button'], callback_data='socks')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(translation['greeting'], reply_markup=reply_markup)

    elif query.data in ['mtproto', 'socks']:
        await query.answer()
        buttons, proxy_info_text = fetch_proxies(query.data, translation)

        if proxy_info_text:
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.reply_text(
                f"{translation['mtproto_msg'] if query.data == 'mtproto' else translation['socks_msg']}\n\n{proxy_info_text}",
                reply_markup=reply_markup
            )
        else:
            await query.message.reply_text(translation['no_proxies'])

def main() -> None:
    """Inicializa o bot e configura os handlers."""
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
